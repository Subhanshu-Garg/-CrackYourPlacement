string LCS(string s1,string s2){
        int n = s1.size();
        int m = s2.size();
        int t[n+1][m+1];
        
        for(int i=0;i<(n + 1);i++) t[i][0] = 0;
        for(int i=0;i<(m + 1);i++) t[0][i] = 0;
        
        for(int i=1;i < n+1;i++){
            for(int j=1;j< m+1;j++){
                if(s1[i-1] == s2[j-1]){
                    t[i][j] = t[i-1][j-1] + 1;
                }
                else {
                    t[i][j] = max(t[i-1][j],t[i][j-1]);
                }
            }
        }
        
        string ans;
        int a = n, b = m;
        while(a >= 1 && b >= 1){
            if(s1[a-1] == s2[b-1]){
                ans.push_back(s1[a-1]);
                a--;b--;
            }
            else {
                if(t[a-1][b] >= t[a][b-1]){
                    a--;
                }
                else {
                    b--;
                }
            }
        }
        reverse(ans.begin(),ans.end());
       return ans; 
    }
    string shortestCommonSupersequence(string str1, string str2) {
        string lcs = LCS(str1,str2);
        
        int i=0,j=0,k = 0;
        string ans;
        while(i<str1.size() && j<str2.size() && k<lcs.size()){
            if(str1[i] == lcs[k] && str2[j] == lcs[k]){
                ans.push_back(str1[i]);
                i++;k++;j++;
            }
            else if(str1[i] != lcs[k] && str2[j] != lcs[k]){
                ans.push_back(str1[i]);
                ans.push_back(str2[j]);
                i++;j++;
            }
            else if(str1[i] != lcs[k]){
                ans.push_back(str1[i]);
                i++;
            }
            else {
                ans.push_back(str2[j]);
                j++;
            }
        }
        
        while(i<str1.size()){
            ans.push_back(str1[i]);
            i++;
        }
        while(j<str2.size()){
            ans.push_back(str2[j]);
            j++;
        }
        
        return ans;
    }
