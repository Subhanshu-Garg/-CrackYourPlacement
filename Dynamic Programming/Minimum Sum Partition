// good question conceptwise and codewise is easy.
//uses last row of dp matrix for checking different subset sums making the complexity lesser.

int subsetSum(int arr[],int n, int sum){
        bool t[n+1][sum+1];
        for(int i=0;i<sum+1;i++) t[0][i] = false;
        for(int i=0;i<n+1;i++) t[i][0] = true;
        
        for(int i=1;i<n+1;i++){
            for(int j=1;j<sum+1;j++){
                if(arr[i-1] <= j){
                    t[i][j] = t[i-1][j-arr[i-1]] || t[i-1][j];
                }
                else {
                    t[i][j] = t[i-1][j];
                }
            }
        }
        for(int i=sum;i>=0;i--){
            if(t[n][i]){
                return i;
            }
        }
        return -1;
        
    }
    
	int minDifference(int arr[], int n)  { 
	    // Your code goes here
	    int sum =  0;
	    for(int  i=0;i<n;i++){
	        sum+=arr[i];
	    }
	    
	    return (sum - 2*subsetSum(arr,n,sum/2));
	} 
