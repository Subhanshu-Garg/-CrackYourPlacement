    int subsetSum(vector<int>& nums,int sum){
        int n = nums.size();
        int t[n+1][sum+1];
        t[0][0] = 1;
        for(int i=1;i<sum+1;i++) t[0][i] = 0;
        
        for(int i=1;i<n+1;i++){
            for(int j=0;j<sum+1;j++){
                if(nums[i-1] <= j){
                    t[i][j] = t[i-1][j-nums[i-1]] + t[i-1][j];
                } else {
                    t[i][j] = t[i-1][j];
                }
            }
        }
        
        return t[n][sum];
    }
    
    int findTargetSumWays(vector<int>& nums, int target) {
        int sum = 0;
        for(int i=0;i<nums.size();i++)
            sum+=nums[i];
        
        if((sum-target)%2 != 0){
            return 0;
        }
        int s;
        if(sum + target >= 0){
            s = sum + target;
        }
        else if(sum - target >= 0){
            s = sum - target;
        }
        else {
            return 0;
        }
        return subsetSum(nums,(s)/2);
    }
