void combinationSum2(vector<int>& nums,int target, int start,vector<int> ans,vector<vector<int>>& res){
        
        if(target == 0){
            res.push_back(ans);
            return;
        }
        else  if(start >= nums.size() || target < 0 || nums[start] > target){
            return;
        }
      
       
        
        int count = 1;
        int k = start+1;
        
        while(k<nums.size() && nums[k] == nums[k-1]){
            count++;
            k++;
        }
        
        for(int i=0;i<=count;i++){  
            if((i*nums[start]) <= target){
                int j = i;
                while(j--){
                    ans.push_back(nums[start]);
                }
                combinationSum2(nums,target - (i*nums[start]),start + count,ans,res);
                j = i;
                while(j--){
                    ans.pop_back();
                }
            }
        }
       
        return;
    }
    
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<int> ans;
        vector<vector<int>> res;
        sort(candidates.begin(),candidates.end());
        combinationSum2(candidates,target,0,ans,res);
        return res;
    }
