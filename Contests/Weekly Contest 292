// Two More Question Required to Learn!!!


//Largest 3-Same Digit Number in String//
class Solution {
public:
    string largestGoodInteger(string num) {
        if(num.size() < 3){
            return "";
        }
        string ans = "";
        int i=0, j=1, k=2;
        while(k<num.size()){
            string temp = "";
            if(num[i] == num[j] && num[j] == num[k]){
                temp += num[i];
                temp += num[j];
                temp += num[k];
                if(ans.empty() || (ans[0] - '0') < (temp[0] - '0')){
                    ans = temp;
                    temp.clear();
                }
            }
            
            i++;j++;k++;
        }
        
        return ans;
    }
};


// Count Nodes Equal Average of Subtree
class Solution {
public:
    int helper(TreeNode* root, int &sum, int &n){
        if(root == NULL){
            return 0;
        }
        
        int lsum = 0, nl = 0 , rsum = 0, nr = 0;
        int l = helper(root->left,lsum,nl);
        int r = helper(root->right, rsum, nr);
        
        sum = lsum + rsum + root->val;
        n = nl + nr + 1;
        
        if( (sum/n) == root->val){
            return l+r+1;
        }
        else {
            return l+r;
        }
    }
    
    int averageOfSubtree(TreeNode* root) {
        int sum = 0;
        int n = 0;
        return helper(root,sum,n);
    }
};


